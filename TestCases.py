from hashlib import sha1, sha256
from random import choice, choices
from string import ascii_lowercase, ascii_uppercase, digits
    
    

class TestCases:
    def __init__(self, numTests = 25):
        """ Initalizer for the TestCases class. Gets the number of tests specified.

        Args:
            numTests (int, optional): number of tests to generate. Defaults to 25. (arbitrarily)
        """
        if numTests < 3:
            numTests = 3
            
        self.statistics = {"total":0, "1char":0, "2char":0, "3char":0, "sha1":0, "sha256": 0}
        self.tests = self.get_random_test_cases(numTests)
        print(f'Generated {self.statistics["total"]} tests. \n\
            {self.statistics["1char"]} 1-character passwords. \n\
            {self.statistics["2char"]} 2-character passwords. \n\
            {self.statistics["3char"]} 3-character passwords. \n\
            {self.statistics["sha1"]} are sha1 hashes. \n\
            {self.statistics["sha256"]} are sha256 hashes.')
        

    def get_random_test_cases(self, numTests):
        """Creates the number of tests specified by numTests.

        3 testcases are guaranteed to be created, i.e. a hash for a password of each allowed character length (1,2,3)
        The other hashes are generated by a weighted random selection of 1, 2, or 3 character passwords.
        Longer passwords are weighted heavier because they make up a larger proportion of the set of allowable passwords.
        (But their weight is not exactly proportional; otherwise 3-character passwords would overwhelmingly be generated)
            
        Args:
            numTests (int): the number of tests to generate

        Returns:
            dictionary, string->string: map of shahashs to plaintext passwords
        """
        allowed_characters = ascii_lowercase + ascii_uppercase + digits + "!?"
        tests = {}
        
        guaranteedStringLength = [3,2,1]

        for _ in range(numTests):
            n = choices([1,2,3], weights=(1, 2, 3),k=1)[0] if not guaranteedStringLength else guaranteedStringLength.pop()

            randomString = ''.join(choices(allowed_characters, k=n))
            randomStringHashed, algtype = self.random_hash_algorithm(randomString.encode('utf-8'))
            if randomStringHashed not in tests.keys():
                tests[randomStringHashed] = randomString
                self.statistics["total"] +=1
                self.statistics[str(n)+"char"] += 1
                self.statistics["sha"+str(algtype)] += 1
            else:
                numTests += 1

        return tests

    def random_hash_algorithm(self, x):
        """Hashes the plaintext password x with a random selection of either SHA1 or SHA256 algorithm.

        Args:
            x (string): plaintext password

        Returns:
            [hash digest of x (string), algorithm identifer (int)]
        """
        algorithm = choice([1,256])
        
        return [sha1(x).hexdigest() if algorithm == 1 else sha256(x).hexdigest(), algorithm]